---
# YAML header
title: "Reproducible documents"
author: "Anna H"
format: html
---

1. Name: Anna
2. Affiliation: Chalmers
3. Impression thus far: Confusion

# Introduction
**This** is the *introduction*.
There are some LEGO figures in @fig-LEGO!

# Methods and results
**Here** we find the results in the form of *three* tables

```{r setup}
#| include: false
# setup in the header of the code chunk tells it to run this code every time the document is opened (?), can only be used once per document
# load libraries/packages and datasets
library(tidyverse)
nhanes_small <- read_csv(here::here("data/nhanes_small.csv"))
# jamal can enable us to show or hide code and/or output in code chunks
```

```{r}
#| include: false
# command + option + i places code chunk on Mac
```

## Table of results

```{r mean mean-age-bmi-table}
#| echo: false
#| warning: false
#| message: false
nhanes_small %>%
  filter(!is.na(diabetes), !is.na(phys_active), !is.na(education)) %>%
  group_by(
    diabetes,
    phys_active,
    education
  ) %>%
  summarize(
    max_bmi = max(bmi,
      na.rm = TRUE
    ),
    min_bmi = min(bmi,
      na.rm = TRUE
    ),
    mean_bmi = mean(bmi,
      na.rm = TRUE
    )
  ) %>%
  ungroup() %>% 
    knitr::kable(caption = "Men values of Age and BMI for diabetes and physical values")
```

## Prettier table COURSE

```{r}
#| echo: false
#| warning: false
#| message: false
nhanes_small %>%
  filter(!is.na(diabetes), !is.na(education)) %>%
  group_by(education, diabetes) %>%
  summarize(
    mean_age = mean(age, na.rm = TRUE),
    mean_bmi = mean(bmi, na.rm = TRUE)
  ) %>%
  ungroup() %>% 
    mutate(
        # task 2A: Apply the round() function to mean_age and mean_bmi columns, to round the values to 1 digit (digits is the second argument of round()).
        
        # Check why the MEAN doesn't want to AVRUNDA till a whole number!
        
        mean_age = round(mean_age, 0),
        mean_bmi = round(mean_bmi, 0),
        
        # task 2B: Use str_to_sentence(education) to capitalize the first letter of the words in the education column.
        education = str_to_sentence(education)
    ) %>%         
        # task 3: Rename diabetes to "Diabetes Status", education to Education, and mean_age and mean_bmi to "Mean Age" and "Mean BMI", using rename() function. Hint: You can rename columns to include spaces by using " around the new column name (e.g. "Diabetes Status" = diabetes). Don’t forget, the renaming form is new = old.
    rename(
        "Diabetes Status" = diabetes,
        "Education" = education,
        "Mean Age" = mean_age,
        "Mean BMI" = mean_bmi
    ) %>% 
    knitr::kable(caption = "Prettier BMI table based on course data")
```


## Prettier table OWN

```{r prettier-table-OWN}
#| echo: false
#| warning: false
#| message: false
nhanes_small %>%
  filter(!is.na(diabetes), !is.na(age), !is.na(phys_active), !is.na(education)) %>%
    # the order you group by defines the order of the table!
  group_by( 
    education, 
    diabetes,
    phys_active,
  ) %>%
  summarize(
    mean_age = mean(age, na.rm = TRUE),
    mean_bmi = mean(bmi, na.rm = TRUE),
    max_bmi = max(bmi, na.rm = TRUE),
    min_bmi = min(bmi, na.rm = TRUE),
  ) %>%
    mutate(
        # task 2A: Apply the round() function to mean_age and mean_bmi columns, to round the values to 1 digit (digits is the second argument of round()).
        mean_age = round(mean_age, 1),
        mean_bmi = round(mean_bmi, 1),
        max_bmi = round(max_bmi, 1),
        min_bmi = round(min_bmi, 1),
        
        # task 2B: Use str_to_sentence(education) to capitalize the first letter of the words in the education column.
        education = str_to_sentence(education)
        ) %>%         
        # task 3: Rename diabetes to "Diabetes Status", education to Education, and mean_age and mean_bmi to "Mean Age" and "Mean BMI", using rename() function. Hint: You can rename columns to include spaces by using " around the new column name (e.g. "Diabetes Status" = diabetes). Don’t forget, the renaming form is new = old.
    rename(
        "Physically active" = phys_active,
        "Diabetes Status" = diabetes,
        "Education" = education,
        "Mean Age" = mean_age,
        "Mean BMI" = mean_bmi,
        "Max BMI" = max_bmi,
        "Min BMI" = min_bmi
        # check why table doesn't show correctly (age and phys_active are in wrong place)
        ) %>% 
    ungroup() %>% 
    knitr::kable(caption = "Prettier BMI table based on own preferences")
```

# Discussion
**This** is a discussion on how it is *very* difficult to keep a clear overview of this jumbled mess of code.

## Exercise 8.7: Inserting pictures
This is exciting. I will now show a picture of LEGO.

#### Inserting images
![LEGO makes life worth living](Images/LEGO.jpg){#fig-LEGO}

# Visualizing data

There are a few way to plot data. Either use ggplot directly (see @fig-bmi-histo-all for an example) or by piping (see @fig-bmi-histo-excluded for an example).

**Continuous**
BMI is a continuous variable which often are presented as histograms.

**Categorical**
Education is a categorical varible INERT MORE

### Using ggplot raw

The code: 
    dataset; 
        argument - aesthetic (define look);
            + ("add a layer")
            argument - geometry (define how data is shown)
            
If you're unsure of which aesthetic you want to use: write ?geom_(aethetic) **in the console**

```{r}
#| fig-cap: "BMI distribution (all)."
#| label: fig-bmi-histo-all
#| #| echo: false
ggplot(nhanes_small, aes(x = bmi)) + 
    geom_histogram(na.rm = TRUE)
```


### Using piping to define ggplot
You don't need to define data again since it's *piped* in.

```{r}
#| fig-cap: "BMI ditribution (outliers excluded)."
#| label: fig-bmi-histo-excluded
#| #| echo: false
nhanes_small %>% 
    filter(bmi <= 60) %>% 
    ggplot(aes(x = bmi)) +
    geom_histogram(na.rm = TRUE)
```


## Discrete variable
Here we're presenting dicrete variables as discussed earlier.
```{r}
#| fig-cap: "Bar plot of education"
#| label: fig-education-barplot
#| #| echo: false
nhanes_small %>% 
    ggplot(aes(x = education)) + 
    geom_bar()
```

Now we remove the respondents with diabetes by using !is.na(VARIABLE TO EXCLUDE)
```{r}
#| echo: false
nhanes_small %>% 
    filter(!is.na(diabetes)) %>% 
    ggplot(aes(x = diabetes)) +
    geom_bar()
```

When combining charts the indentation in YAMAL is important. Remember double spacing when needed!

Combining two charts:
```{r}
#| fig-cap: "Counts of diabetes and education"
#| label: fig-diabetes-education
#| fig-subcap: 
#|   - "Diabetes"
#|   - "Education"
#| layout-ncol: 2
#| echo: false
nhanes_small %>% 
    filter(!is.na(diabetes)) %>% 
    ggplot(aes(x = diabetes)) +
    geom_bar()

nhanes_small %>% 
    filter(!is.na(education)) %>% 
    ggplot(aes(x = education)) +
    geom_bar()
```

### Plotting two variables

**Plotting two *continuous* variables**
Dependent on the y axis, independent on the x axis. Here: how BMI affects bloodpressure.
```{r}
#| echo: false
nhanes_small %>% 
    ggplot(aes(x = bmi, y = bp_sys_ave)) + 
    geom_hex(na.rm = TRUE) +
    geom_smooth(na.rm = TRUE)
```

**Plotting two *discrete* variables**
If you don't want to show missing values, filter them *before* piping the dataset into your graphic. It's also more readable and prettier in general.

```{r}
#| echo: false
nhanes_small %>% 
    filter(!is.na(education), !is.na(diabetes)) %>% 
    ggplot(aes(x = diabetes, fill = education)) +
    geom_bar(position = position_dodge())
```


**Plotting discrete *and* continuous variables**
First categorical/discrete variable. Then continuous variable.
Categorical variable on the *x-axis*, continuous on the *y-axis*. 

```{r}
#| fig-cap: "Violin plot of correlation beetween diabetes and BMI"
#| echo: false
nhanes_small %>% 
    filter(!is.na(diabetes), bmi <= 60) %>% 
    ggplot(aes(x = diabetes, y = bmi)) +
    geom_violin(na.rm = TRUE) +
    geom_boxplot(na.rm = TRUE, width = 0.1)
```

### Exercise 9.5: Make a plot with one or two variables

**TASK:** *For each task below, create a new code chunk for it. Copy and paste the template code shown in each task into its own code chunk. When you complete each task, run styler and render the document to make sure it works and to see the output.*

Result:
@fig-exercise95a
@fig-exercise95b
@fig-exercise95c

```{r}
#| echo: false
library(NHANES)
nhanes_exercise <- NHANES %>%
  rename_with(snakecase::to_snake_case) %>%
  rename(sex = gender)
```

### Task 9.5.a
Create plots for age distribution of diabetes diagnois.
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-cap: "Age distribution of diabetes diagnosis"
#| layout-ncol: 2
#| label: fig-exercise95a
#| fig-subcap: 
#|   - "1"
#|   - "2"

# Distribution of age
nhanes_exercise %>% 
    filter(!is.na(diabetes)) %>% 
    ggplot(aes(x = age)) +
    geom_density(na.rm = TRUE)

# Distribution of age at diabetes diagnosis
nhanes_exercise %>% 
    filter(!is.na(diabetes)) %>% 
    ggplot(aes(x = diabetes_age)) + 
    geom_density()
```

### Task 9.5.b
Create a bar chart of smokers over 20.
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-cap: "Smokers over 20"
#| label: fig-exercise95b
nhanes_exercise %>% 
    filter(!is.na(smoke_now), age >= 20) %>% 
    ggplot(aes(x = smoke_now)) +
    geom_bar()
```

### Task 9.5.c
Creating a hex plot and a trend line (?) for blood pressure.
```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-cap: "Blood pressure"
#| label: fig-exercise95c

# BMI in relation to mean arterial pressure
nhanes_exercise %>% 
    mutate(mean_arterial_pressure = (bp_sys_ave + (2 * bp_dia_ave))/3) %>% 
    ggplot(aes(x = bmi, y = mean_arterial_pressure)) +
    geom_hex() +
    geom_smooth()
    
```

## Plotting *three or more* variables
**TASK:** *Is systolic blood pressure different in those with or without diabetes and dependent on level of education?*

Good for howing **one continuous** (blood pressure) + **two categorical** (diabetes, education) variables. Remember: blood pressure is continuous, better for y-axis!
```{r}
#| echo: false
#| warning: false
#| message: false
nhanes_small %>% 
    filter(!is.na(diabetes), !is.na(education)) %>%
    ggplot(aes(x = education, y = bp_sys_ave, colour = diabetes)) +
    geom_boxplot(na.rm = TRUE)
    
```

**TASK:** *How does BMI relate to systolic blood pressure and age?*
(Three continuous variables)

Notice gradient of colour: due to contninuous nature of variable! Not A/B as with categorical variable (see above)!

```{r}
#| echo: false
#| warning: false
#| message: false
nhanes_small %>% 
    ggplot(aes(x = bmi, y = bp_sys_ave, color = age)) +
    geom_point(na.rm = TRUE)
```


**TASK:** *How does BMI relate to systolic blood pressure, and what is different between those with and without diabetes?*
(two continuous and one categorical variable)

```{r}
#| echo: false
#| warning: false
#| message: false
nhanes_small %>% 
    filter(!is.na(diabetes)) %>% 
    ggplot(aes(x = bmi, y = bp_sys_ave, colour = diabetes)) +
    geom_point(na.rm = TRUE) +
    # add columns (cols) based on variables (vars) in facet function
    facet_grid(cols = vars(diabetes))
```
Tips: *alpha* = transparence, insert in geom_GRAPHNAME(na.rm = TRUE, HERE)


**FACETING**

**TASK:** *How does BMI relate to systolic blood pressure, and what is the influence of diabete and education (and age)?*
```{r}
#| echo: false
#| warning: false
#| message: false
nhanes_small %>% 
    filter(!is.na(diabetes), !is.na(education)) %>% 
    #x-axis is BMI; y-axis is blood pressure, aesthetic for colour based on age
    ggplot(aes(x = bmi, y = bp_sys_ave, colour = age)) +
    geom_point(na.rm = TRUE) +
    # adding multi-directional faceting
    facet_grid(rows = vars(diabetes),
               cols = vars(education))

```


**SCALES AND THEMES**

**TASK**: *Task text here*
```{r}
#| echo: false
#| warning: false
#| message: false

# creating a base plot
base_plot <- nhanes_small %>% 
    filter(!is.na(diabetes), !is.na(education)) %>% 
    ggplot(aes(x = bmi, y = bp_sys_ave, color = age)) +
    geom_point(na.rm = TRUE) +
    facet_grid(rows = vars(diabetes),
               cols = vars(education))
# add theme to plot by scale_
base_plot +
    scale_colour_viridis_c()
```

**PRE-DEFINED THEMES**

**TASK:** *Task text here*

```{r}
#| echo: false
#| warning: false
#| message: false

# creating a base plot
base_plot <- nhanes_small %>% 
    filter(!is.na(diabetes), !is.na(education)) %>% 
    ggplot(aes(x = bmi, y = bp_sys_ave, color = age)) +
    geom_point(na.rm = TRUE) +
    facet_grid(rows = vars(diabetes),
               cols = vars(education))
# add theme to plot by scale_
# define final plot (final_plot)
final_plot <- base_plot +
    scale_colour_viridis_c() +
    # set theme (layout) of chart and x-axis and y-axis lables (labs)
    theme_linedraw() +
    labs(title = "BMI, systolic blood pressure and age by diabetes and education",
         y = "Systolic blood pressure (mmHg)",
         x = "BMI (kg/m2)")
```

**SAVING GRAPHS**

.png
```{r}
ggsave(here::here("doc/Images/scatterplot.png"),
       #  give plot you want to save
       final_plot,
       width = 7,
       height = 5,
       unit = "cm")
```

.pdf
```{r}
ggsave(here::here("doc/Images/scatterplot.pdf"),
       #  give plot you want to save
       final_plot,
       width = 7,
       height = 5)
```

.jpg
```{r}
ggsave(here::here("doc/Images/scatterplot.jpg"),
       #  give plot you want to save
       final_plot,
       width = 7,
       height = 5)
```


